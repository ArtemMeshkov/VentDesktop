1)Да, читал код коллеги по разработке приложения. Двоякое ощущение, т.к. он не являлся опытным программистом, я ничего от него не ожидал,
но увидел названия переменных, методов, которые никак не описывают свой функционал, это не было удобно, пришлось долго разбираться.
Читал много кода документации, в учебниках - было гораздо приятнее.

2) C#,Java,PHP - многофункциональные языки, на них сейчас пишется много бэк-энда веб-приложений. 
Python- относится к ним тоже, но играет большую роль в DataScience,MachineLearning.
Kotlin, Swift - программирование Android и iOS соответственно.
VB - работа с приложениями Microsoft Office.
C,C++ - ЯП очень широкого применения. От программирования ПЛК, различных схем, до построения различных вычислительных систем.
JavaScript, HTML+CSS - фронт-энд разработка
Delphi,Pascal - сейчас уже больше учебные языки.
SQL - для баз данных.
Go,Ruby - многофукнциональные языки программирования, которые применяются как в бэк-энде, так и во фронт-энде

3)Компилятор - программа, преобразующая исходный код, написанный на ЯП высокого уровня, в машинный код для интерпретации компьютеру.
Далее с байт-кодом можно работать с разными языками ЯП.

4)Фреймворк - ПО, упрощающее разработку и структурирующее код. То есть существует какая-то база, которую разработчик дальше 
реализует и развивает в своих целях.
Известные фреймворки - Entity Framework(для упрощения общения с БД), ASP.NET MVC, NUnit для тестирования, WinForms, WPF, WCF.

5)HTTP- протокол передачи данных в "клиент-сервер" схеме. Через этот протокол клиент посылает запрос на сервер, он его обрабатывает
с нужными сервисами и дает ответ - как правило HTML страницу, которая и отобразится в браузере у клиента.
HTTP- незащищенный протокол, HTTPS-защищенный с помощью асимметричных систем шифрования (TLS), которая с помощью закрытого ключа не 
позволяет перехватить или исказить данные. Тк с каждым годом безопасность становится все более острой темой,HTTPS становится популярнее.

6)Не изучал ReactJS, но попробую ответить из логических соображений. 
Меню, 

7)SQL стандартизован, подходит под большинство СУБД и является давним стандартом для обращения с базами данных. Они хорошо подходят
для больших объемов данных, которые с помощью SQL жестко структурируются и с ними несложно обращаться.
Для разработчиков иногда проще использовать NoSQL, тк существует разные модели представления данных и с ними проще работать.Такие базы 
данных быстрее, ее легче организовать.

8) Приложено в BMC-мой пример, Task-решение к задаче из письма.

9)Если учесть, что тут имеет место быть связь "многие ко многим", делаем третью промежуточную таблицу, которую назовем ProductLikeCategories.
Таблицу с продуктами - Product, таблицу с категориями - Categories.
Тогда запрос будет выглядеть следующим образом :
SELECT p."Name", c."Name" FROM Products p 
LEFT JOIN ProductLikeCategories plc ON p.Id = plc.ProductId
LEFT JOIN Categories c ON plc.CategoryId = c.Id;
